@model IEnumerable<TaskList.ViewModels.TaskViewModel>

@{
	ViewData["Title"] = "Index";
}

@functions {
	public string GetColor(string tagName)
	{
		int hash = tagName.Length * 37;

		byte red = (byte)((hash & 0xFF0000) >> 16);
		byte green = (byte)((hash & 0x00FF00) >> 8);
		byte blue = (byte)(hash & 0x0000FF);

		red = (byte)((red + tagName.Length * 5) % 256);
		green = (byte)((green + tagName.Length * 3) % 256);
		blue = (byte)((blue + tagName.Length * 7) % 256);

		return $"rgb({red}, {green}, {blue})";
	}

}


<h1>Tasks</h1>

<p>
	<a class="btn btn-primary" asp-action="Create">Create New</a>
</p>
<table class="table">
	<thead>
		<tr>
			<th>@Html.DisplayNameFor(model => model.Title)</th>
			<th>@Html.DisplayNameFor(model => model.Description)</th>
			<th>@Html.DisplayNameFor(model => model.DueDate)</th>
			<th>@Html.DisplayNameFor(model => model.Status)</th>
			<th>@Html.DisplayNameFor(model => model.User.Email)</th>
			<th>Tags</th>
			<th></th>
		</tr>
	</thead>
	<tbody>
		@if (ViewContext.HttpContext.Session.GetString("UserType") == "Admin")
		{
			@foreach (var item in Model)
			{
				<tr>
					<td>@Html.DisplayFor(modelItem => item.Title)</td>
					<td>@Html.DisplayFor(modelItem => item.Description)</td>
					<td>@Html.DisplayFor(modelItem => item.DueDate)</td>
					<td>@Html.DisplayFor(modelItem => item.Status)</td>
					<td>@Html.DisplayFor(modelItem => item.User.Email)</td>
					<td>
						@if (item?.Tags != null && item.Tags.Any())
						{
							@foreach (var tag in item.Tags)
							{
								<span class="badge border border-2 shadow-sm rounded-pill p-2 me-2" style="background-color:@GetColor(@tag); color:white;">@tag</span>
								//added functionality to where tag colors are based on length. Was either between this or its ID
							}
						}
					</td>
					<td>
						<a asp-action="Edit" class="btn btn-primary" asp-route-id="@item.Task_Id">Edit</a> |
						<a asp-action="Details" class="btn btn-primary" asp-route-id="@item.Task_Id">Details</a> |
						<a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.Task_Id">Delete</a>
					</td>
				</tr>
			}
		}
		else{
			@foreach (var item in Model.Where(x => x.User.User_Id == ViewContext.HttpContext.Session.GetInt32("UserId")))
			{
				<tr>
					<td>@Html.DisplayFor(modelItem => item.Title)</td>
					<td>@Html.DisplayFor(modelItem => item.Description)</td>
					<td>@Html.DisplayFor(modelItem => item.DueDate)</td>
					<td>@Html.DisplayFor(modelItem => item.Status)</td>
					<td>@Html.DisplayFor(modelItem => item.User.Email)</td>
					<td>
						@if (item?.Tags != null && item.Tags.Any())
						{
							@foreach (var tag in item.Tags)
							{
								<span class="badge border border-2 shadow-sm rounded-pill p-2 me-2" style="background-color:@GetColor(@tag); color:white;">@tag</span>
								//added functionality to where tag colors are based on length. Was either between this or its ID
							}
						}
					</td>
					<td>
						<a asp-action="Edit" class="btn btn-primary" asp-route-id="@item.Task_Id">Edit</a> |
						<a asp-action="Details" class="btn btn-primary" asp-route-id="@item.Task_Id">Details</a> |
						<a asp-action="Delete" class="btn btn-danger" asp-route-id="@item.Task_Id">Delete</a>
					</td>
				</tr>
			}
		}
	</tbody>
</table>

